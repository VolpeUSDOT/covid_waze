install.packages("egg")
# setup ----
library(tidyverse)
library(egg)
load('Data/Waze_Covid_joined.RData')
output.loc = 'Output'
# Histograms by alert type
ggplot(df) +
geom_histogram(aes(count)) +
scale_x_log10() +
facet_wrap(~alert_type)
df_all <- df
df <- df %>%
filter(date <= Sys.Date()-7)
select_counties <- c('Middlesex County', 'Cook County', 'Snohomish County')
df_s <- df %>% filter(county %in% select_counties &
state %in% c('WA', 'MA', 'IL'))
ggplot(df_s, aes(x = date, y = count, color = alert_type)) +
geom_point(alpha = 0.2) +
geom_smooth() +
facet_wrap(~county,
nrow = length(select_counties),
scales = 'free_y') +
ggtitle('Time series of Waze alert counts for three example counties')
ggsave(file = file.path(output.loc, 'Example_full_time_series_plots.jpeg'),
width = 15, height = 15)
gp4 <- ggplot(df_s %>% filter(year == '2020' & month %in% c('01', '02', '03')), aes(x = date, y = count, color = alert_type)) +
geom_point(alpha = 0.2) +
geom_smooth() +
ylim(c(0, 6000)) +
facet_wrap(~county, nrow = length(select_counties), scale = 'free_y') +
ggtitle('2020')  +
geom_line(aes(x = date, y = cases),
size = 2,
color = 'black')
# Same, but now compare 2018 - 2020 sepearately for these counties
gp1 <- ggplot(df_s %>% filter(year == '2018' & month %in% c('01', '02', '03')), aes(x = date, y = count, color = alert_type)) +
geom_point(alpha = 0.2) +
geom_smooth() +
ylim(c(0, 6000)) +
facet_wrap(~county) +
ggtitle('2018')
gp2 <- ggplot(df_s %>% filter(year == '2019' & month %in% c('01', '02', '03')), aes(x = date, y = count, color = alert_type)) +
geom_point(alpha = 0.2) +
geom_smooth() +
ylim(c(0, 6000)) +
facet_wrap(~county) +
ggtitle('2019')
gp3 <- ggplot(df_s %>% filter(year == '2020' & month %in% c('01', '02', '03')), aes(x = date, y = count, color = alert_type)) +
geom_point(alpha = 0.2) +
geom_smooth() +
ylim(c(0, 6000)) +
facet_wrap(~county) +
ggtitle('2020')
gpall <- ggarrange(gp1, gp2, gp3,
ncol = 1,
heights = c(1, 1, 1))
# Histograms by alert type
ggplot(df) +
geom_histogram(aes(count)) +
scale_x_log10() +
facet_wrap(~alert_type)
dim(df)
names(df)
str(df)
df$weekday <- wday(df$date[1:100])
df$date[1:100]
#Generate placeholders for expected values by county/day for 2020 based on 2018 and 2019 data
#Use day of week (not day of year) to capture weekend/weekday patterns
df$dateWday <- df$date
#Generate placeholders for expected values by county/day for 2020 based on 2018 and 2019 data
#Use day of week (not day of year) to capture weekend/weekday patterns
df$dateWday <- as.Date(df$date)
wday(df$dateWday[1:100])
library(lubridate)
wday(df$dateWday[1:100])
wday(df$dateWday[10000:10100])
#Generate placeholders for expected values by county/day for 2020 based on 2018 and 2019 data
#Use day of week (not day of year) to capture weekend/weekday patterns
df$dateWday <- as.Date(df$date)
wday(ymd(080101))
wday(ymd(080101), label = TRUE, abbr = FALSE)
df$dateWday <- wday(ymd(df$dateWday),label = TRUE, abbr = FALSE)
week(df$dateWday[1:100])
week(df$date[1:100])
df$date[1:100]
#Save week of year
df$WeekYear <- week(df$date)
load('Data/Waze_Covid_joined.RData')
output.loc = 'Output'
# Histograms by alert type
ggplot(df) +
geom_histogram(aes(count)) +
scale_x_log10() +
facet_wrap(~alert_type)
# check df size
dim(df)
names(df)
str(df)
#Generate placeholders for expected values by county/day for 2020 based on 2018 and 2019 data
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
#Save week of year
df$week_year <- week(df$date)
table(df$WeekYear)
table(df$week_year)
table(df$day_week)
df$weekend <- df$day_week == "Saturday" | df$day_week == "Sunday"
table(df$weekend)
Waze_avg <- df %>%
group_by(alert_type, county, month_day_week) %>%
summarise(mean = mean(count), n = n())
Waze_avg <- df %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count), n = n())
table(df$year)
df[,year!="2020"]
Waze_avg <- df_no2020 %>%
filter(df, year != "2020") %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count), n = n())
Waze_avg <- df %>%
filter(df, year != "2020") %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count), n = n())
#Placeholder values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
Waze_avg <- df_no2020 %>%
filter(df, year != "2020") %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count), n = n())
# setup ----
library(tidyverse)
library(egg)
library(lubridate)
load('Data/Waze_Covid_joined.RData')
output.loc = 'Output'
# check df size
dim(df)
names(df)
str(df)
#Generate placeholders for expected values by county/day for 2020 based on 2018 and 2019 data
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
df$weekend <- df$day_week == "Saturday" | df$day_week == "Sunday"
#Save week of year
df$week_year <- week(df$date)
#Placeholder values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
Waze_avg <- df_no2020 %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count), n = n())
View(Waze_avg)
View(Waze_avg)
Waze_avg <- df_no2020 %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count), n = n(), na.rm=TRUE)
Waze_avg <- df_no2020 %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = mean(count, round=0), n = n(), na.rm=TRUE)
?mean
Waze_avg <- df_no2020 %>%
group_by(alert_type, county, month, day_week) %>%
summarise(mean = round(mean(count),1), n = n(), na.rm=TRUE)
Waze_avg <- df_no2020 %>%
group_by(alert_type, state, county, month, day_week) %>%
summarise(mean = round(mean(count),1), n = n(), na.rm=TRUE)
#Placeholder values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
Waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(mean = round(mean(count),1), n = n(), na.rm=TRUE)
# setup ----
library(tidyverse)
library(egg)
library(lubridate)
load('Data/Waze_Covid_joined.RData')
output.loc = 'Output'
table(df$fips)
length(df$fips)
length(unique(df$fips))
levels(df$fips)
nunique(df$fips)
unique(df$fips)
length(unique(df$fips))
length(unique(paste(df$state,df$county))
)
names(df)
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
df$weekend <- df$day_week == "Saturday" | df$day_week == "Sunday"
#Save week of year
df$week_year <- week(df$date)
#Placeholder values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
Waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(mean = round(mean(count),1), n = n(), na.rm=TRUE)
# setup ----
library(tidyverse)
library(egg)
library(lubridate)
load('Data/Waze_Covid_joined.RData')
output.loc = 'Output'
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
df$weekend <- df$day_week == "Saturday" | df$day_week == "Sunday"
#Save week of year
df$week_year <- week(df$date)
#Placeholder values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
Waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(mean = round(mean(count),1), n = n(), na.rm=TRUE)
#Join averages by alert type, county, month, day_week to df as placeholders
waze_estimates_df <- left_join(df, waze_avg, by = c('alert_type','fips', 'state', 'county', 'month', 'day_week'), keep=FALSE)
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(mean = round(mean(count),1), n = n(), na.rm=TRUE)
#Join averages by alert type, county, month, day_week to df as placeholders
waze_estimates_df <- left_join(df, waze_avg, by = c('alert_type','fips', 'state', 'county', 'month', 'day_week'), keep=FALSE)
View(Waze_avg)
waze_avg1 <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(mean = round(mean(count, na.rm=TRUE),1), n = n())
View(waze_avg1)
View(waze_avg1)
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(mean = round(mean(count, na.rm=TRUE),1), n = n())
View(waze_avg)
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(obs_count_mean = round(mean(count, na.rm=TRUE),1), n = n())
write.csv(waze_avg, file=file.path(output.loc,"waze_avg_counts.csv"), row.names=false)
write.csv(waze_avg, file=file.path(output.loc,"waze_avg_counts.csv"), row.names=FALSE)
# setup ----
library(tidyverse)
output.loc = 'Output'
load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed.RData'))
(2-4)/2
(4-2)/2
(2-4)/4
(4-2)/4
(4-2)/2
median(2, 4, 4, 3, 5, 6, 8)
median(c(2, 4, 4, 3, 5, 6, 8))
median(c(2, 4, 4, 3, 5, 6, 8, 8))
median(c(2, 4, 4, 3, 5, 6, 8, 8. 8))
median(c(2, 4, 4, 3, 5, 6, 8, 8, 8))
?median
median(c(2, 4, 4, 3, 5, 6, 8, 8, 8))
mean(c(2, 4, 4, 3, 5, 6, 8, 8, 8))
median(2, 4, 4, 3, 5, 6, 8)
median(c(2, 4, 4, 3, 5, 6, 8, 8, 8))
median(c(2, 4, 4, 3, 5, 6, 8, 8))
mean(c(2, 4, 4, 3, 5, 6, 8, 8))
median(c(2, 2, 2, 3, 5, 6, 8, 100))
mean(c(2, 2, 2, 3, 5, 6, 8, 100))
sd(c(2, 2, 2, 3, 5, 6, 8, 100))
sd(c(2, 2, 2, 3, 5, 6, 8, 50))
sd(c(2, 2, 2, 3, 5, 6, 25, 50))
mean(c(2, 2, 2, 3, 5, 6, 25, 50))
install.packages("plotly")
install.packages("usmap")
df_2020 <- filter(df, year == "2020")
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(obs_count_mean = round(mean(count, na.rm=TRUE),1),
obs_count_median = round(median(count, na.rm=TRUE),1),
obs_count_sd = round(sd(count, na.rm=TRUE),1),
n = n())
View(waze_avg)
?filter
View(df_no2020)
df_bl2020 <- filter(df, year == "2020" & date >= "2020-01-05" & date <= "2020-02-08" )
View(df_bl2020)
waze_bl2020 <- df_bl2020 %>%
group_by(alert_type, fips, state, county, day_week) %>%
summarise(bl2020_mean = round(mean(count, na.rm=TRUE),1),
bl2020_median = round(median(count, na.rm=TRUE),1),
bl2020_sd = round(sd(count, na.rm=TRUE),1),
n = n())
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
df$weekend <- df$day_week == "Saturday" | df$day_week == "Sunday"
#Save week of year
df$week_year <- week(df$date)
# check df size
dim(df)
names(df)
# setup ----
library(tidyverse)
library(egg)
library(lubridate)
load('Data/Waze_Covid_joined.RData')
output.loc = 'Output'
# check df size
dim(df)
names(df)
str(df)
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
df_no2020 <- filter(df, year != "2020")
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(obs_count_mean = round(mean(count, na.rm=TRUE),1),
obs_count_median = round(median(count, na.rm=TRUE),1),
obs_count_sd = round(sd(count, na.rm=TRUE),1),
n = n())
table(df$year)
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
output.loc = 'Output'
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.csv'))
output.loc = 'Output'
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.csv'))
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.csv'))
df_bl2020 <- filter(df, year == "2020" & date >= "2020-01-05" & date <= "2020-02-08" )
waze_bl2020 <- df_bl2020 %>%
group_by(alert_type, fips, state, county, day_week) %>%
summarise(bl2020_mean = round(mean(count, na.rm=TRUE),1),
bl2020_median = round(median(count, na.rm=TRUE),1),
bl2020_sd = round(sd(count, na.rm=TRUE),1),
n = n())
View(waze_bl2020)
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
# setup ----
library(tidyverse)
output.loc = 'Output'
load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed.RData'))
output.loc = 'Output'
load(file.path(output.loc, 'Waze_2020_Predicted_Observed.RData'))
load('Output/Waze_2020_Predicted_Observed.RData')
getwd()
load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
library(tidyverse)
library(egg)
library(lubridate)
output.loc = 'Output'
load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
#  Generate expected values by county/day for 2020 based on 2018 and 2019 data----
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
df_no2020 <- filter(df, year != "2020")
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(hist_mean = round(mean(count, na.rm=TRUE),1),
hist_median = round(median(count, na.rm=TRUE),1),
hist_sd = round(sd(count, na.rm=TRUE),1),
hist_n = n())
View(waze_avg)
#2020 baseline values - county level averages by day of week for Jan 5th-Feb 8th, 2020----
df_bl2020 <- filter(df, year == "2020" & date >= "2020-01-05" & date <= "2020-02-08" )
waze_bl2020 <- df_bl2020 %>%
group_by(alert_type, fips, state, county, day_week) %>%
summarise(bl2020_mean = round(mean(count, na.rm=TRUE),1),
bl2020_median = round(median(count, na.rm=TRUE),1),
bl2020_sd = round(sd(count, na.rm=TRUE),1),
bl2020_n = n())
View(waze_bl2020)
(2-4)/4
compiled_pred_s <- compiled_pred %>% filter(state == 'RI')
View(compiled_pred_s)
write.csv(waze_avg, file=file.path(output.loc,"waze_avg_counts.csv"), row.names=FALSE)
output.loc = 'Output'
write.csv(waze_avg, file=file.path(output.loc,"waze_avg_counts.csv"), row.names=FALSE)
file=file.path(output.loc,"waze_baseline_2020.csv")
file
getwd()
write.csv(waze_avg, file=file.path(output.loc,"/waze_avg_counts.csv"), row.names=FALSE)
output.loc = 'Output'
#write.csv functions not working??
write.csv(waze_avg, file=file.path(output.loc,"waze_avg_counts.csv"), row.names=FALSE)
#write.csv functions not working??
write.csv(waze_avg, file=file.path(output.loc,"waze_avg_counts.csv"), row.names=FALSE)
write.csv(waze_bl2020, file=file.path(output.loc,"/waze_baseline_2020.csv"), row.names=FALSE)
compiled_pred_w <- compiled_pred %>%
pivot_wider(names_from = alert_type,
values_from = c(count, pred_count))
# setup ----
library(tidyverse)
library(egg)
library(lubridate)
compiled_pred_w <- compiled_pred %>%
pivot_wider(names_from = alert_type,
values_from = c(count, pred_count))
# setup ----
library(tidyverse)
?pviot_wider
?pivot_wider
??pivot_wider
source('utility/get_packages.R')
library(usmap)
compiled_pred_w <- compiled_pred %>%
pivot_wider(names_from = alert_type,
values_from = c(count, pred_count))
# setup ----
library(tidyverse)
