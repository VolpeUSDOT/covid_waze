'day_week' = 'day_week_ch',
'fips' = 'fips'))
compiled_pred_w$month_ch <- as.character(compiled_pred_w$month)
Waze2020_indices <- left_join(compiled_pred_w , waze_avg,
by = c('month' = 'month_ch',
'day_week_ch' = 'day_week',
'fips' = 'fips'))
compiled_pred_w$month_ch <- as.character(compiled_pred_w$month)
Waze2020_indices <- left_join(compiled_pred_w , waze_avg,
by = c('month' = 'month_ch',
'day_week_ch' = 'day_week',
'fips' = 'fips'))
Waze2020_indices <- left_join(compiled_pred_w , waze_avg,
by = c('month_ch' = 'month',
'day_week' = 'day_week_ch',
'fips' = 'fips'))
View(Waze2020_indices)
?left_join
Waze2020_indices <- compiled_pred_w %>% left_join(waze_avg,
by = c('month_ch' = 'month',
'day_week' = 'day_week_ch',
'fips' = 'fips'))
?select
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg, by = 'fips')
4/.02
2/.02
# setup ----
library(tidyverse)
library(lubridate)
output.loc = 'Output'
load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
#2017-2019 mean values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(hist_mean = round(mean(count, na.rm=TRUE),1),
hist_median = round(median(count, na.rm=TRUE),1),
hist_sd = round(sd(count, na.rm=TRUE),1),
hist_n = n())
compiled_pred_s <- compiled_pred %>% filter(state == 'RI')
compiled_pred_w <- compiled_pred %>%
pivot_wider(names_from = alert_type,
values_from = c(count, pred_count))
# Impact: percent decrease in activity compared to expected (pred_count)
# Updated calculation to (observed-predicted)/(predicted) to get sign right (negative is lower than predicted value)
compiled_pred_w <- compiled_pred_w %>%
mutate(impact_crash = (( count_ACCIDENT - pred_count_ACCIDENT) / pred_count_ACCIDENT ),
impact_weh =   (( count_WEATHERHAZARD - pred_count_WEATHERHAZARD) / pred_count_WEATHERHAZARD ),
impact_jam =   (( count_JAM - pred_count_JAM) / pred_count_JAM )
)
impact_index = ( rowSums(compiled_pred_w[,c('impact_crash',
'impact_weh',
'impact_jam')]) / 3 )
compiled_pred_w <- data.frame(compiled_pred_w, impact_index)
str(compiled_pred_w)
str(waze_avg)
compiled_pred_w$month_ch <- as.character(compiled_pred_w$month)
#Merge historical means by month and day of week (2017-2019) and 2020 baseline values to give different options for calculating response indices.
waze_avg$day_week_ch <- as.character(waze_avg$day_week)
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg, by = c('fips'='fips', 'month_ch' = 'month', 'day_week'='day_week_ch'))
View(Waze2020_indices)
View(compiled_pred_w)
waze_avg_w <- waze_avg %>%
pivot_wider(names_from = alert_type,
values_from = c(hist_mean, hist_median, hist_sd, hist_n))
View(waze_avg_w)
waze_avg_w <- waze_avg %>%
pivot_wider(names_from = alert_type,
values_from = c(hist_mean, hist_median, hist_sd))
View(waze_avg_w)
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg, by = c('fips'='fips', 'month_ch' = 'month', 'day_week'='day_week_ch'))
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_w, by = c('fips'='fips', 'month_ch' = 'month', 'day_week'='day_week_ch'))
View(Waze2020_indices)
waze_avg$month_int <- as.integer(waze_avg$month_int)
waze_avg$month_int <- as.integer(waze_avg$month)
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_w, by = c('fips'='fips', 'month' = 'month_int', 'day_week'='day_week_ch'))
waze_avg_w <- waze_avg %>%
pivot_wider(names_from = alert_type,
values_from = c(hist_mean, hist_median, hist_sd))
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_w, by = c('fips'='fips', 'month' = 'month_int', 'day_week'='day_week_ch'))
df_bl2020 <- filter(df, year == "2020" & date >= "2020-01-05" & date <= "2020-02-08" )
waze_bl2020 <- df_bl2020 %>%
group_by(alert_type, fips, state, county, day_week) %>%
summarise(bl2020_mean = round(mean(count, na.rm=TRUE),1),
bl2020_median = round(median(count, na.rm=TRUE),1),
bl2020_sd = round(sd(count, na.rm=TRUE),1),
bl2020_n = n())
waze_bl2020_w <- waze_bl2020 %>%
pivot_wider(names_from = alert_type,
values_from = c(bl2020_mean, bl2020_median, bl2020_sd))
View(waze_bl2020_w)
waze_bl2020$day_week_ch <- as.character(waze_bl2020$day_week)
waze_bl2020_w <- waze_bl2020 %>%
pivot_wider(names_from = alert_type,
values_from = c(bl2020_mean, bl2020_median, bl2020_sd))
Waze2020_indices <- Waze2020_indices %>%
left_join(waze_bl2020_w, by = c('fips'='fips', 'day_week'='day_week_ch'))
Waze2020_indices$pred_hist_JAM_diff <- Waze2020_indices$pred_count_JAM - Waze2020_indices$hist_mean_JAM
View(Waze2020_indices)
names(waze_avg_w)
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_w %>% select(-state, -county, -day_week),
by = c('fips'='fips', 'month' = 'month_int', 'day_week'='day_week_ch'))
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_W,
by = c('fips'='fips', 'month' = 'month_int', 'day_week'='day_week_ch'))
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_w,
by = c('fips'='fips', 'month' = 'month_int', 'day_week'='day_week_ch'))
Waze2020_indices <- compiled_pred_w %>%
left_join(waze_avg_w,
by = c('state' = 'state', 'county'='county', 'fips'='fips', 'month' = 'month_int', 'day_week'='day_week_ch'))
waze_bl2020$day_week_ch <- as.character(waze_bl2020$day_week)
#make baseline 2020 data wide
waze_bl2020_w <- waze_bl2020 %>%
pivot_wider(names_from = alert_type,
values_from = c(bl2020_mean, bl2020_median, bl2020_sd))
#join baseline data to waze indices file
Waze2020_indices <- Waze2020_indices %>%
left_join(waze_bl2020_w, by = c('state' = 'state', 'county'='county', 'fips'='fips', 'day_week'='day_week_ch'))
Waze2020_indices$pred_hist_JAM_diff <- Waze2020_indices$pred_count_JAM - Waze2020_indices$hist_mean_JAM
hist(Waze2020_indices$pred_hist_JAM_diff)
hist(log(Waze2020_indices$pred_hist_JAM_diff))
plot(Waze2020_indices$pred_count_JAM ~ Waze2020_indices$hist_mean_JAM)
save(file = file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'),
list = c('compiled_pred', 'compiled_pred_w', 'waze_avg', 'waze_bl2020', 'Waze2020_indices'))
write.csv(compiled_pred_w, file = file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.csv'), row.names = F)
write.csv(Waze2020_indices, file = file.path(output.loc, 'Waze_2020_Indices.csv'), row.names = F)
#load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
library(tidyverse)
library(egg)
library(lubridate)
output.loc = 'Output'
#load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
View(compiled_pred)
View(compiled_pred_w)
ggplot(Waze2020_indices) +
geom_histogram(aes(count_JAM)) +
scale_x_log10() +
facet_wrap(~day_week)
ggplot(Waze2020_indices) +
geom_histogram(aes(count_JAM)) +
#scale_x_log10() +
facet_wrap(~day_week)
ggplot(Waze2020_indices) +
geom_histogram(aes(count_JAM)) +
scale_x_log10() +
facet_wrap(~day_week)
#Explore patterns
plot(Waze2020_indices$pred_count_JAM ~ Waze2020_indices$hist_mean_JAM)
#look at high predited values
Waze2020_indices[,Waze2020_indices$pred_count_JAM>10000]
#look at high predited values
Waze2020_indices[,which(Waze2020_indices$pred_count_JAM>10000)]
which(Waze2020_indices$pred_count_JAM>10000)
#look at high predited values
Waze2020_indices[,c(which(Waze2020_indices$pred_count_JAM>10000))]
#look at high predited values
Waze2020_indices[which(Waze2020_indices$pred_count_JAM>10000),]
#look at high predited values
jh <- Waze2020_indices[which(Waze2020_indices$pred_count_JAM>10000),]
View(jh)
jam_filt <- Waze2020_indices[which(Waze2020_indices$pred_count_JAM<10000),]
plot(jam_filt$pred_count_JAM ~ jam_filt$hist_mean_JAM)
View(jam_filt)
jam_filt2 <- Waze2020_indices[which(Waze2020_indices$pred_count_JAM>10000 & Waze2020_indices$hist_mean_JAM<1),]
View(jam_filt2)
library(tidyverse)
library(egg)
library(lubridate)
output.loc = 'Output'
#load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
ggplot(Waze2020_indices) +
geom_histogram(aes(count_JAM)) +
scale_x_log10() +
facet_wrap(~day_week)
View(Waze2020_indices)
#Explore patterns
plot(Waze2020_indices$pred_count_JAM ~ Waze2020_indices$hist_mean_JAM)
#look at high predicted values
jh <- Waze2020_indices[which(Waze2020_indices$pred_count_JAM>10000),]
#These are LA - missing historical and 2020 baseline data, but have model results.
#Look at plot again when CA data are fixed - predicted values are truncated at 5,000, except for the 86 values above 10,000 that are all LA.
#Explore patterns
jam_filt <- Waze2020_indices[which(Waze2020_indices$pred_count_JAM<10000),]
plot(jam_filt$pred_count_JAM ~ jam_filt$hist_mean_JAM)
jam_filt2 <- Waze2020_indices[which(Waze2020_indices$pred_count_JAM>10000 & Waze2020_indices$hist_mean_JAM<1),]
plot(jam_filt$pred_count_JAM ~ jam_filt$hist_mean_JAM)
abline(b=1, a=0)
abline(b=1, a=0)
plot(jam_filt$pred_count_JAM ~ jam_filt$hist_mean_JAM)
abline(b=1, a=0)
plot(jam_filt$pred_count_JAM ~ jam_filt$hist_mean_JAM)
abline(b=1, a=0)
(2-10)/10
(2-100)/100
(2-10000)/10000
(4-0.5)/4
(4-0.5)/.5
(100-0.5)/.5
(100-0.5)/100
(1-0.5)/1
(2-4)/2
(2-100)/2
(2-100)/100
(100-1)/1
# Apply filters to large outliers
plot(Waze2020_indices$count_ACCIDENT)
summary(Waze2020_indices$count_ACCIDENT)
plot(Waze2020_indices$count_WEATHERHAZARD)
Waze2020_indices[which(Waze2020_indices$count_WEATHERHAZARD>25000),]
Waze2020_indices[which(Waze2020_indices$count_WEATHERHAZARD>20000),]
Waze2020_indices[which(Waze2020_indices$count_WEATHERHAZARD>10000),]
plot(Waze2020_indices$count_JAM)
summary(Waze2020_indices$count_JAM)
summary(Waze2020_indices$count_WEATHERHAZARD)
which(Waze2020_indices$count_WEATHERHAZARD>20000)
Waze2020_indices$count_WEATHERHAZARD[which(Waze2020_indices$count_WEATHERHAZARD>20000)] <- "NA"
Waze2020_indices$count_WEATHERHAZARD[which(Waze2020_indices$count_WEATHERHAZARD>20000)]
#load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
which(Waze2020_indices$count_WEATHERHAZARD>20000)
Waze2020_indices$count_WEATHERHAZARD[which(Waze2020_indices$count_WEATHERHAZARD>20000)]
Waze2020_indices$count_WEATHERHAZARD[which(Waze2020_indices$count_WEATHERHAZARD>20000)] <- NA
plot(Waze2020_indices$count_WEATHERHAZARD)
Waze2020_indices$count_WEATHERHAZARD[which(Waze2020_indices$count_WEATHERHAZARD>10000)] <- NA
plot(Waze2020_indices$count_WEATHERHAZARD)
summary(Waze2020_indices$count_WEATHERHAZARD)
Waze2020_indices$pred_count_ACCIDENT[which(Waze2020_indices$pred_count_ACCIDENT<0.5)]
Waze2020_indices$pred_count_ACCIDENT[which(Waze2020_indices$pred_count_ACCIDENT<0.25)]
pred_Acc_threshold <- which(Waze2020_indices$pred_count_ACCIDENT<0.25)
pred_Acc_threshold <- which(Waze2020_indices$pred_count_ACCIDENT<0.2)
pred_JAM_threshold <- which(Waze2020_indices$pred_count_JAM<0.5)
pred_WEH_threshold <- which(Waze2020_indices$pred_count_WEATHERHAZARD<0.5)
# Apply filters to large predicted Waze alert outliers----
plot(Waze2020_indices$pred_count_ACCIDENT) #no clear outliers
Waze2020_indices$pred_count_ACCIDENT[which(Waze2020_indices$pred_count_ACCIDENT>600)]
Waze2020_indices[,which(Waze2020_indices$pred_count_ACCIDENT>600)]
Waze2020_indices[which(Waze2020_indices$pred_count_ACCIDENT>600),]
summary(Waze2020_indices$pred_count_ACCIDENT)
plot(Waze2020_indices$pred_count_WEATHERHAZARD) #some huge outliers
plot(Waze2020_indices$pred_count_JAM) #no clear outliers
Waze2020_indices[which(Waze2020_indices$pred_count_JAM>10000),] #Los Angeles - don't apply filter
summary(Waze2020_indices$pred_count_JAM)
plot(Waze2020_indices$pred_count_WEATHERHAZARD) #
Waze2020_indices[which(Waze2020_indices$pred_count_WEATHERHAZARD>3000),] #Los Angeles - don't apply filter
summary(Waze2020_indices$pred_count_WEATHERHAZARD)
summary(Waze2020_indices$count_ACCIDENT)
plot(Waze2020_indices$count_JAM) #no clear outliers
plot(Waze2020_indices$count_JAM) #no clear outliers
summary(Waze2020_indices$count_JAM) #max ~
pred_ACC_threshold <- which(Waze2020_indices$pred_count_ACCIDENT<0.2)
?which
?select
?which
#update values below threshold to zero
Waze2020_indices$pred_count_ACCIDENT[pred_ACC_threshold]
pred_ACC_threshold_high <- which(Waze2020_indices$pred_count_ACCIDENT>0.2) # ~38,000 values
#update values below threshold to zero
Waze2020_indices$pred_count_ACCIDENT[pred_ACC_threshold] <- 0
#set thresholds
pred_ACC_threshold <- which(Waze2020_indices$pred_count_ACCIDENT<0.2) # ~38,000 values
which(Waze2020_indices$pred_count_ACCIDENT=0.2)
which(Waze2020_indices$pred_count_ACCIDENT == 0)
t <- which(Waze2020_indices$pred_count_ACCIDENT == 0)
Waze2020_indices$pred_count_JAM[pred_JAM_threshold] <- 0
Waze2020_indices$pred_count_WEATHERHAZARD[pred_WEH_threshold] <- 0
pred_count_WEATHERHAZARD[pred_WEH_threshold]
Waze2020_indices$pred_count_WEATHERHAZARD[pred_WEH_threshold]
Waze2020_indices$pred_count_JAM[pred_JAM_threshold]
Waze2020_indices <- Waze2020_indices %>%
mutate(impact_crash_th = (( count_ACCIDENT - pred_count_ACCIDENT) / pred_count_ACCIDENT ),
impact_weh_th =   (( count_WEATHERHAZARD - pred_count_WEATHERHAZARD) / pred_count_WEATHERHAZARD ),
impact_jam_th =   (( count_JAM - pred_count_JAM) / pred_count_JAM )
)
impact_index_th = ( rowSums(Waze2020_indices[,c('impact_crash_th',
'impact_weh_th',
'impact_jam_th')]) / 3 )
Waze2020_indices <- data.frame(Waze2020_indices, impact_index_th)
summary(Waze2020_indices$impact_crash_th)
summary(Waze2020_indices$impact_crash_th, na.rm=T)
Waze2020_indices$impact_crash_th[is.NaN(Waze2020_indices$impact_crash_th) == T]
Waze2020_indices$impact_crash_th[is.nan(Waze2020_indices$impact_crash_th) == TRUE]
Waze2020_indices$impact_crash_th[is.nan(Waze2020_indices$impact_crash_th) == TRUE] <- NA
#replace NaN with NA
Waze2020_indices$impact_crash_th[is.nan(Waze2020_indices$impact_crash_th) == TRUE] <- NA
Waze2020_indices$impact_weh_th[is.nan(Waze2020_indices$impact_weh_th) == TRUE] <- NA
Waze2020_indices$impact_jam_th[is.nan(Waze2020_indices$impact_jam_th) == TRUE] <- NA
impact_index_th = ( rowSums(Waze2020_indices[,c('impact_crash_th',
'impact_weh_th',
'impact_jam_th')]) / 3 )
Waze2020_indices <- data.frame(Waze2020_indices, impact_index_th)
summary(Waze2020_indices$impact_crash_th, na.rm=T)
summary(Waze2020_indices$impact_crash_th)
Waze2020_indices$impact_crash_th[is.nan(Waze2020_indices$impact_crash_th) == TRUE]
Waze2020_indices$impact_crash_th[is.nan(Waze2020_indices$impact_crash_th) == Inf]
summary(Waze2020_indices$impact_crash_th)
Waze2020_indices <- Waze2020_indices %>%
mutate(impact_crash_th = (( count_ACCIDENT - pred_count_ACCIDENT) / pred_count_ACCIDENT ),
impact_weh_th =   (( count_WEATHERHAZARD - pred_count_WEATHERHAZARD) / pred_count_WEATHERHAZARD ),
impact_jam_th =   (( count_JAM - pred_count_JAM) / pred_count_JAM )
)
Waze2020_indices$impact_crash_th[which(Waze2020_indices$impact_crash_th==Inf)]
Waze2020_indices$impact_crash_th[which(Waze2020_indices$impact_crash_th==Inf)] <- NA
summary(Waze2020_indices$impact_crash_th)
Waze2020_indices$impact_crash_th[which(Waze2020_indices$impact_crash_th==Inf)] <- NA
Waze2020_indices$impact_weh_th[which(Waze2020_indices$impact_weh_th==Inf)] <- NA
Waze2020_indices$impact_jam_th[which(Waze2020_indices$impact_jam_th==Inf)] <- NA
summary(Waze2020_indices$impact_crash_th)
summary(Waze2020_indices$impact_weh_th)
summary(Waze2020_indices$impact_jam_th)
impact_index_th = ( rowSums(Waze2020_indices[,c('impact_crash_th',
'impact_weh_th',
'impact_jam_th')]) / 3 )
Waze2020_indices <- data.frame(Waze2020_indices, impact_index_th)
library(tidyverse)
library(egg)
library(lubridate)
output.loc = 'Output'
#load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
# Remove weather/hazard outliers (~6 values from Jan 1 2020 in NY/CT counties - error with data)
Waze2020_indices$count_WEATHERHAZARD[which(Waze2020_indices$count_WEATHERHAZARD>10000)] <- NA
#plot(Waze2020_indices$count_WEATHERHAZARD)
summary(Waze2020_indices$count_WEATHERHAZARD) #range now to ~4800
#set thresholds
pred_ACC_threshold <- which(Waze2020_indices$pred_count_ACCIDENT<0.2) # ~38,000 values
pred_JAM_threshold <- which(Waze2020_indices$pred_count_JAM<0.5) #~40,500 values
pred_WEH_threshold <- which(Waze2020_indices$pred_count_WEATHERHAZARD<0.5) #33 values
#update values below threshold to zero
Waze2020_indices$pred_count_ACCIDENT[pred_ACC_threshold] <- 0
Waze2020_indices$pred_count_JAM[pred_JAM_threshold] <- 0
Waze2020_indices$pred_count_WEATHERHAZARD[pred_WEH_threshold] <- 0
#re-calculate impact factors with thresholded values----
Waze2020_indices <- Waze2020_indices %>%
mutate(impact_crash_th = (( count_ACCIDENT - pred_count_ACCIDENT) / pred_count_ACCIDENT ),
impact_weh_th =   (( count_WEATHERHAZARD - pred_count_WEATHERHAZARD) / pred_count_WEATHERHAZARD ),
impact_jam_th =   (( count_JAM - pred_count_JAM) / pred_count_JAM )
)
#replace Inf with NA (from dividing by zero)
Waze2020_indices$impact_crash_th[is.nan(Waze2020_indices$impact_crash_th) == TRUE] <- NA
Waze2020_indices$impact_weh_th[is.nan(Waze2020_indices$impact_weh_th) == TRUE] <- NA
Waze2020_indices$impact_jam_th[is.nan(Waze2020_indices$impact_jam_th) == TRUE] <- NA
Waze2020_indices$impact_crash_th[which(Waze2020_indices$impact_crash_th==Inf)] <- NA
Waze2020_indices$impact_weh_th[which(Waze2020_indices$impact_weh_th==Inf)] <- NA
Waze2020_indices$impact_jam_th[which(Waze2020_indices$impact_jam_th==Inf)] <- NA
summary(Waze2020_indices$impact_crash_th)
summary(Waze2020_indices$impact_weh_th)
summary(Waze2020_indices$impact_jam_th)
View(Waze2020_indices)
round(.2,1)
round(.2,0)
round(.5,0)
round(.51,0)
Waze2020_indices <- Waze2020_indices %>%
mutate(impact_crash_rnd = (( count_ACCIDENT - round(pred_count_ACCIDENT,0)) / round(pred_count_ACCIDENT,0)),
impact_weh_rnd =   (( count_WEATHERHAZARD - round(pred_count_WEATHERHAZARD,0)) / round(pred_count_WEATHERHAZARD,0)),
impact_jam_rnd =   (( count_JAM - round(pred_count_JAM,0)) / round(pred_count_JAM,))
)
Waze2020_indices$impact_crash_rnd[which(Waze2020_indices$impact_crash_rnd==Inf)] <- NA
Waze2020_indices$impact_weh_rnd[which(Waze2020_indices$impact_weh_rnd==Inf)] <- NA
Waze2020_indices$impact_jam_rnd[which(Waze2020_indices$impact_jam_rnd==Inf)] <- NA
summary(Waze2020_indices$impact_crash_th)
summary(Waze2020_indices$impact_weh_th)
summary(Waze2020_indices$impact_jam_th)
#replace NaN with NA
Waze2020_indices$impact_crash_rnd[is.nan(Waze2020_indices$impact_crash_rnd) == TRUE] <- NA
Waze2020_indices$impact_weh_rnd[is.nan(Waze2020_indices$impact_weh_rnd) == TRUE] <- NA
Waze2020_indices$impact_jam_rnd[is.nan(Waze2020_indices$impact_jam_rnd) == TRUE] <- NA
#Replace Inf with NA
Waze2020_indices$impact_crash_rnd[which(Waze2020_indices$impact_crash_rnd==Inf)] <- NA
Waze2020_indices$impact_weh_rnd[which(Waze2020_indices$impact_weh_rnd==Inf)] <- NA
Waze2020_indices$impact_jam_rnd[which(Waze2020_indices$impact_jam_rnd==Inf)] <- NA
summary(Waze2020_indices$impact_crash_th)
summary(Waze2020_indices$impact_weh_th)
summary(Waze2020_indices$impact_jam_th)
# This is the average decrease in activity.
# Use total instead of average? Or weighted average?
impact_index_rnd = ( rowSums(Waze2020_indices[,c('impact_crash_rnd',
'impact_weh_rnd',
'impact_jam_rnd')]) / 3 )
Waze2020_indices <- data.frame(Waze2020_indices, impact_index_rnd)
# Save -----
save(file = file.path(output.loc, 'Waze_2020_Index_cleaned.RData'),
list = c('Waze2020_indices'))
write.csv(Waze2020_indices, file = file.path(output.loc, 'Waze_2020_Index_cleaned.csv'), row.names = F)
# setup ----
library(tidyverse)
library(usmap)
library(egg)
library(lubridate)
output.loc = 'Output'
load('Data/Waze_Covid_joined.RData')
load(file.path(output.loc, 'Waze_2020_Predicted_Observed_Index.RData'))
#  Generate expected values by county/day for 2020 based on 2018 and 2019 data ----
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
#2017-2019 mean values - county level averages by month and dow
df_no2020 <- filter(df, year != "2020")
waze_avg <- df_no2020 %>%
group_by(alert_type, fips, state, county, month, day_week) %>%
summarise(hist_mean = round(mean(count, na.rm=TRUE),1),
hist_median = round(median(count, na.rm=TRUE),1),
hist_sd = round(sd(count, na.rm=TRUE),1),
hist_n = n())
# setup ----
library(tidyverse)
library(usmap)
library(egg)
library(lubridate)
output.loc = 'Output'
load('Data/Waze_Covid_joined.RData')
#  Generate expected values by county/day for 2020 based on 2018 and 2019 data ----
#Use day of week (not day of year) to capture weekend/weekday patterns
df$date_weekday <- as.Date(df$date)
df$day_week <- wday(ymd(df$date_weekday),label = TRUE, abbr = FALSE)
waze_state_bl2020 <- waze_bl2020 %>%
group_by(alert_type, state) %>%
summarise(bl2020_st_mean = round(mean(count, na.rm=TRUE),1),
bl2020_st_median = round(median(count, na.rm=TRUE),1),
bl2020_st_sd = round(sd(count, na.rm=TRUE),1),
bl2020_st_n = n())
waze_bl2020 <- df_bl2020 %>%
group_by(alert_type, fips, state, county, day_week) %>%
summarise(bl2020_mean = round(mean(count, na.rm=TRUE),1),
bl2020_median = round(median(count, na.rm=TRUE),1),
bl2020_sd = round(sd(count, na.rm=TRUE),1),
bl2020_n = n())
df_bl2020 <- filter(df, year == "2020" & date >= "2020-01-05" & date <= "2020-02-08" )
waze_bl2020 <- df_bl2020 %>%
group_by(alert_type, fips, state, county, day_week) %>%
summarise(bl2020_mean = round(mean(count, na.rm=TRUE),1),
bl2020_median = round(median(count, na.rm=TRUE),1),
bl2020_sd = round(sd(count, na.rm=TRUE),1),
bl2020_n = n())
waze_state_bl2020 <- waze_bl2020 %>%
group_by(alert_type, state) %>%
summarise(bl2020_st_mean = round(mean(count, na.rm=TRUE),1),
bl2020_st_median = round(median(count, na.rm=TRUE),1),
bl2020_st_sd = round(sd(count, na.rm=TRUE),1),
bl2020_st_n = n())
View(waze_bl2020)
waze_state_bl2020 <- waze_bl2020 %>%
group_by(alert_type, state) %>%
summarise(bl2020_st_mean = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_st_median = round(sum(bl2020_median, na.rm=TRUE),1),
bl2020_st_sd = round(sum(sd, na.rm=TRUE),1),
bl2020_st_n = n())
waze_state_bl2020 <- waze_bl2020 %>%
group_by(alert_type, state) %>%
summarise(bl2020_st_mean = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_st_n = n())
View(waze_state_bl2020)
waze_county_bl2020 <- waze_bl2020 %>%
group_by(alert_type, fips, state, county) %>%
summarise(bl2020_cty_mean = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_cty_n = n())
View(waze_county_bl2020)
waze_county_bl2020 <- waze_bl2020 %>%
group_by(alert_type, fips, state, county) %>%
summarise(bl2020_cty_sum = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_cty_n = n())
waze_state_bl2020 <- waze_bl2020 %>%
group_by(alert_type, state) %>%
summarise(bl2020_st_sum = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_st_n = n())
wazeall_county_bl2020 <- waze_bl2020 %>%
group_by(fips, state, county) %>%
summarise(bl2020_cty_sum_all = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_cty_n_all = n())
wazeall_state_bl2020 <- waze_bl2020 %>%
group_by(state) %>%
summarise(bl2020_st_sum_all = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_st_n_all = n())
View(wazeall_county_bl2020)
View(wazeall_state_bl2020)
=9372/3
9372/3
waze_county_bl2020 <- waze_bl2020 %>%
group_by(alert_type, fips, state, county) %>%
summarise(bl2020_cty_sum = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_cty_n = n())
write.csv(waze_county_bl2020, file = file.path(output.loc, "waze_county_bl2020.csv"), row.names=FALSE)
waze_state_bl2020 <- waze_bl2020 %>%
group_by(alert_type, state) %>%
summarise(bl2020_st_sum = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_st_n = n())
write.csv(waze_state_bl2020, file = file.path(output.loc, "waze_state_bl2020.csv"), row.names=FALSE)
wazeall_county_bl2020 <- waze_bl2020 %>%
group_by(fips, state, county) %>%
summarise(bl2020_cty_sum_all = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_cty_n_all = n())
write.csv(wazeall_county_bl2020, file = file.path(output.loc, "wazeall_county_bl2020.csv"), row.names=FALSE)
wazeall_state_bl2020 <- waze_bl2020 %>%
group_by(state) %>%
summarise(bl2020_st_sum_all = round(sum(bl2020_mean, na.rm=TRUE),1),
bl2020_st_n_all = n())
write.csv(wazeall_state_bl2020, file = file.path(output.loc, "wazeall_state_bl2020.csv"), row.names=FALSE)
(131*28)+(102*33)+(16*133)
